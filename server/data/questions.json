[
  { "text": "What does 'Vibe Coding' emphasize most?", "choices": ["Pure algorithmic speed", "Creativity & collaboration", "Only strict style guides", "Hardware tuning"], "answerIndex": 1 },
  { "text": "Which practice best supports flow in a team?", "choices": ["Loud open-office alerts", "Short feedback loops & pairing", "Async PR reviews only", "Weekend-only sprints"], "answerIndex": 1 },
  { "text": "Ethical use of AI tools means…", "choices": ["Never disclosing AI assistance", "Attribution, evaluation, and accountability", "Copying any code from the web", "Letting AI commit directly to main"], "answerIndex": 1 },
  { "text": "A good 'vibe' in codebases feels like…", "choices": ["Hostile & gatekept", "Welcoming, documented, and playful", "Ambiguous ownership", "Random configs"], "answerIndex": 1 },
  { "text": "Which ritual strengthens creative collaboration?", "choices": ["Solo merges only", "Blameless retros", "No standups ever", "1-year release cycles"], "answerIndex": 1 },
  { "text": "Pair programming is most valuable when…", "choices": ["Tasks are trivial and repetitive", "You need knowledge transfer and design thinking", "You want to avoid code reviews", "You want double the typing speed"], "answerIndex": 1 },
  { "text": "Short iterations help teams because they…", "choices": ["Increase planning overhead", "Provide fast feedback and reduce risk", "Delay feedback until the end", "Eliminate the need for tests"], "answerIndex": 1 },
  { "text": "A good commit message should primarily…", "choices": ["List all changed files", "Describe why the change matters and its impact", "Repeat the ticket number only", "Use memes for fun"], "answerIndex": 1 },
  { "text": "A blameless retrospective focuses on…", "choices": ["Finding the person at fault", "Improving systems and processes", "Ranking teammates", "Hiding incidents"], "answerIndex": 1 },
  { "text": "In code reviews, a constructive first step is to…", "choices": ["Nitpick variable names", "Ask clarifying questions and confirm intent", "Reject anything unfamiliar", "Rewrite the code yourself"], "answerIndex": 1 },
  { "text": "Teams encourage flow state by…", "choices": ["Maximizing context switching", "Minimizing interruptions and WIP", "Scheduling back-to-back meetings", "Using only dark mode"], "answerIndex": 1 },
  { "text": "Prototypes are primarily for…", "choices": ["Immediate production release", "Learning and reducing uncertainty", "Perfecting pixel details", "Replacing documentation"], "answerIndex": 1 },
  { "text": "An accessibility best practice is…", "choices": ["Decorative-only alt text", "Sufficient color contrast and semantic HTML", "Click targets under 24px", "Tab order by visual layout only"], "answerIndex": 1 },
  { "text": "Inclusive naming in codebases…", "choices": ["Is unnecessary ceremony", "Improves clarity and avoids alienation", "Hurts performance", "Should mirror inside jokes"], "answerIndex": 1 },
  { "text": "Using open-source responsibly means…", "choices": ["Ignoring license terms", "Respecting licenses and giving attribution", "Hard-forking everything", "Copy-pasting without credit"], "answerIndex": 1 },
  { "text": "Which branching strategy best supports collaboration?", "choices": ["Long-lived feature branches", "Trunk-based with small frequent PRs", "Direct commits to main without review", "One mega-PR per quarter"], "answerIndex": 1 },
  { "text": "Good logging should be…", "choices": ["Verbose everywhere", "Actionable, structured, and not noisy", "Only errors, never context", "Written after incidents"], "answerIndex": 1 },
  { "text": "For creative/UX-heavy code, tests should favor…", "choices": ["Brittle unit tests of CSS", "Behavioral and integration tests", "No tests—manual only", "Randomized snapshots"], "answerIndex": 1 },
  { "text": "Responsive UX means…", "choices": ["Animations for everything", "Immediate feedback after actions", "Only server-side renders", "Hiding errors"], "answerIndex": 1 },
  { "text": "When integrating AI-generated code, you should…", "choices": ["Merge without review", "Review critically and run tests", "Skip tests to move fast", "Assume correctness"], "answerIndex": 1 },
  { "text": "Healthy conflict resolution starts with…", "choices": ["Winning the argument", "Focusing on shared goals and data", "Escalating to executives", "Public call-outs"], "answerIndex": 1 },
  { "text": "Great comments typically explain…", "choices": ["What the code does line-by-line", "Why a decision was made", "The author’s mood", "Unrelated TODOs"], "answerIndex": 1 },
  { "text": "Smooth onboarding often includes…", "choices": ["A README with quickstart scripts", "A giant monolithic wiki", "Pairing discouraged", "Only tribal knowledge"], "answerIndex": 1 },
  { "text": "Prefer performance micro-optimizations…", "choices": ["Before measuring", "Only after profiling reveals bottlenecks", "Never", "By default in prototypes"], "answerIndex": 1 },
  { "text": "Git hygiene tip: before opening a PR…", "choices": ["Rebase/sync a small branch and ensure tests pass", "Force-push to main", "Squash everyone’s commits", "Rename the repo"], "answerIndex": 1 },
  { "text": "Better estimation often starts with…", "choices": ["Slicing scope and defining acceptance criteria", "Adding buffer to everything", "Guessing in hours", "Avoiding unknowns"], "answerIndex": 1 },
  { "text": "Creative constraints help because they…", "choices": ["Spark ideas and focus effort", "Limit imagination", "Are only for art", "Slow delivery"], "answerIndex": 1 },
  { "text": "Effective daily standups are…", "choices": ["Short, focused on blockers and next steps", "Status monologues", "45 minutes minimum", "Code reviews in disguise"], "answerIndex": 1 },
  { "text": "Safer releases use…", "choices": ["Feature flags and rollback plans", "Friday night deploys", "Manual FTP uploads", "Hotfixes to main only"], "answerIndex": 1 },
  { "text": "Lightweight user research that fits small teams…", "choices": ["Think-aloud tests with ~5 users", "Lab studies with 100 participants", "Only analytics, never talking to users", "Skip research to ship"], "answerIndex": 1 },
  { "text": "CI pipeline best practice is…", "choices": ["Running only on Fridays", "Fast, reliable, and visible", "Manual steps everywhere", "No tests in CI"], "answerIndex": 1 },
  { "text": "Effective code ownership is…", "choices": ["A single gatekeeper for all code", "Shared ownership with clear areas", "No ownership at all", "Ownership by title only"], "answerIndex": 1 },
  { "text": "To reduce merge conflicts, teams should…", "choices": ["Batch work for weeks", "Integrate frequently (small PRs)", "Commit to long-lived branches", "Avoid code reviews"], "answerIndex": 1 },
  { "text": "Refactoring works best when it is…", "choices": ["Deferred indefinitely", "Done alongside new changes", "Only during emergencies", "A big bang rewrite"], "answerIndex": 1 },
  { "text": "Living documentation is usually…", "choices": ["In random chat threads", "Close to the code (README, docstrings)", "On a private whiteboard", "In someone’s memory"], "answerIndex": 1 },
  { "text": "Feature toggles mainly help teams…", "choices": ["Ship hidden malware", "Safely ship incomplete work", "Avoid writing tests", "Remove code reviews"], "answerIndex": 1 },
  { "text": "Good incident postmortems are…", "choices": ["Punitive and personal", "Blameless and actionable", "Optional and secret", "Focused on punishment"], "answerIndex": 1 },
  { "text": "Product discovery often includes…", "choices": ["Only analytics dashboards", "Talking to users and exploring problems", "Skipping validation", "Building first, asking later"], "answerIndex": 1 },
  { "text": "Technical debt should be…", "choices": ["Ignored forever", "Deliberately managed and prioritized", "Hidden from stakeholders", "Erased from the backlog"], "answerIndex": 1 },
  { "text": "A great way to slice stories is…", "choices": ["By database table", "Vertical slices delivering user value", "By team boundaries", "Only backend first"], "answerIndex": 1 },
  { "text": "Ideal pull requests are…", "choices": ["Massive with thousands of lines", "Small, focused, and reviewable", "Without descriptions", "Pushed straight to main"], "answerIndex": 1 },
  { "text": "Healthy review etiquette favors…", "choices": ["Waiting days to reply", "Quick responses to keep flow", "Drive-by approvals", "Public shaming"], "answerIndex": 1 },
  { "text": "On-call health requires…", "choices": ["1 person always on", "Rotations + runbooks + SLOs", "Ignoring alerts", "Weekend-only paging"], "answerIndex": 1 },
  { "text": "Design systems mainly provide…", "choices": ["Random component names", "Consistency and faster iteration", "Bigger bundles only", "Less accessibility"], "answerIndex": 1 },
  { "text": "Pairing works best when…", "choices": ["One types, one watches silently", "Partners switch roles and discuss", "Only the senior drives", "Nobody asks questions"], "answerIndex": 1 },
  { "text": "A better naming habit is to…", "choices": ["Use single letters", "Use intent‑revealing names", "Prefer internal jokes", "Encode ticket IDs only"], "answerIndex": 1 },
  { "text": "Balanced testing strategy resembles…", "choices": ["Only end‑to‑end tests", "Unit + integration with few e2e", "No tests at all", "Random manual tests"], "answerIndex": 1 },
  { "text": "If the build fails, the team should…", "choices": ["Ignore and keep merging", "Stop and fix it first", "Deploy anyway", "Comment it out"], "answerIndex": 1 },
  { "text": "A code smell usually indicates…", "choices": ["Personal failure", "An opportunity for design improvement", "Immediate rewrite", "That code is perfect"], "answerIndex": 1 },
  { "text": "Effective team retros are…", "choices": ["Optional and rare", "Regular, short, and honest", "Only when things break", "Hours of status updates"], "answerIndex": 1 },
  { "text": "Good backlog grooming means…", "choices": ["Adding everything forever", "Prioritizing, clarifying, and pruning", "Letting it rot", "Only executives edit"], "answerIndex": 1 },
  { "text": "To improve performance safely, first…", "choices": ["Guess and micro‑optimize", "Profile to find bottlenecks", "Rewrite in C++", "Disable logging everywhere"], "answerIndex": 1 },
  { "text": "A healthy team culture values…", "choices": ["Heroics and burnout", "Psychological safety and learning", "Competition only", "Hidden knowledge"], "answerIndex": 1 },
  { "text": "When planning, it's best to…", "choices": ["Lock scope up front", "Slice scope and iterate with feedback", "Avoid assumptions mapping", "Ignore risks"], "answerIndex": 1 },
  { "text": "Feature kickoff should start with…", "choices": ["Picking a tech stack first", "Clearly defined outcomes and constraints", "Mocking the competitor", "Assigning blame"], "answerIndex": 1 }
]